<html>
<head>
  <script>
      document.addEventListener('DOMContentLoaded', () => {
          const getSort = ({ target }) => {
              const order = (target.dataset.order = -(target.dataset.order || -1));
              const index = [...target.parentNode.cells].indexOf(target);
              const collator = new Intl.Collator(['en', 'ru'], { numeric: true });
              const comparator = (index, order) => (a, b) => order * collator.compare(
                  a.children[index].innerHTML,
                  b.children[index].innerHTML
              );

              for(const tBody of target.closest('table').tBodies)
                  tBody.append(...[...tBody.rows].sort(comparator(index, order)));

              for(const cell of target.parentNode.cells)
                  cell.classList.toggle('sorted', cell === target);
          };

          document.querySelectorAll('.table_sort thead').forEach(tableTH => tableTH.addEventListener('click', () => getSort(event)));

      });
  </script>

  <style>
    .table_sort table {
      border-collapse: collapse;
    }

    .table_sort th {
      color: #ffebcd;
      background: #008b8b;
      cursor: pointer;
      font-size: large;
    }

    .table_sort td {
      font-size: medium;
    }

    .table_sort td,
    .table_sort th {
      width: 150px;
      height: 40px;
      text-align: center;
      border: 2px solid #846868;
    }

    .table_sort tbody tr:nth-child(even) {
      background: #e3e3e3;
    }

    th.sorted[data-order="1"],
    th.sorted[data-order="-1"] {
      position: relative;
    }

    th.sorted[data-order="1"]::after,
    th.sorted[data-order="-1"]::after {
      right: 8px;
      position: absolute;
    }

    th.sorted[data-order="-1"]::after {
      content: "▼"
    }

    th.sorted[data-order="1"]::after {
      content: "▲"
    }
  </style>
</head>
<table class = "table_sort">
  <thead>
  <tr>
    <th>Description</th>
    <th>Address</th>
    <th>Min salary</th>
    <th>Job title</th>
    <th>Employee</th>
    <th>Status</th>
    <th>Edit</th>
    <th>Delete</th>
  </tr>
  </thead>
  <tbody>
  <% @request.each do |item| %>
    <tr>
      <td><%= item.description %></td>
      <td><%= item.address %></td>
      <td><%= item.min_salary %></td>
      <td><%= item.job.job_title %></td>
      <td><%= item.employee.id == 0 ? (link_to "Работник не выбран", choose_employee_path(item.id)) : (link_to item.employee.first_name + ' ' + item.employee.second_name, employee_path + "?id=" + item.employee.id.to_s)%><br><%= item.employee.id != 0 ? (link_to "Перевыбрать", choose_employee_path(item.id)) : "" %></td>
      <td><%= item.condition.title %></td>
      <td><%= item.condition.id == 1 ? (link_to "Edit", edit_request_path(item.id)) : ('Нельзя изменить, так как выбран работник') %></td>
      <td><%= item.condition.id == 1 ? (button_to "Delete",  { action: :destroy, id: item.id }, method: :delete) : ('Нельзя удалить, так как выбран работник') %></td>
    </tr>
  <% end %>
  </tbody>
</table>
</html>
<input type="button" value="Создать новое заявление" onClick='location.href="/applications/new"'>
<input type="button" value="На главную" onClick='location.href="/"'>
